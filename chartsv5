import { Component, ElementRef, ViewChild, AfterViewInit, OnDestroy } from '@angular/core';
import * as echarts from 'echarts';

@Component({
  selector: 'app-tps-chart',
  template: `<div #chartContainer style="width: 100%; height: 400px; border: 1px solid #ccc;"></div>`
})
export class TpsChartComponent implements AfterViewInit, OnDestroy {
  @ViewChild('chartContainer') chartContainer: ElementRef;
  chartInstance: any;

  // Mock data (replace with HTTP call later)
  xData = ['06:00:01','06:00:02','06:00:03','06:00:04','06:00:05'];
  yData = [2177, 1234, 7654, 5642, 3123];

  ngAfterViewInit() {
    console.log('[ngAfterViewInit] Component view initialized.');
    setTimeout(() => this.initChart(), 0);
  }

  initChart() {
    console.log('[initChart] Starting chart initialization...');

    // Check container size
    const container = this.chartContainer.nativeElement;
    console.log('[initChart] Container width:', container.clientWidth);
    console.log('[initChart] Container height:', container.clientHeight);

    this.chartInstance = echarts.init(container);
    console.log('[initChart] Chart instance created:', this.chartInstance);

    // Debug raw data
    console.log('[initChart] Raw xData:', this.xData);
    console.log('[initChart] Raw yData:', this.yData);
    console.log('[initChart] xData length:', this.xData.length);
    console.log('[initChart] yData length:', this.yData.length);

    // Build chart options
    const options = {
      title: { text: 'TPS Distribution', left: 'center' },
      tooltip: { trigger: 'axis' },
      dataZoom: [
        { type: 'inside' },
        { type: 'slider' }
      ],
      xAxis: {
        type: 'category',
        data: this.xData,
        axisLabel: { rotate: 45 }
      },
      yAxis: { type: 'value' },
      series: [{
        type: 'line',
        data: this.yData,
        smooth: true,
        lineStyle: { color: '#007bff' },
        itemStyle: { color: '#007bff' }
      }]
    };

    console.log('[initChart] Final chart options:', options);

    // Set chart options
    this.chartInstance.setOption(options);
    console.log('[initChart] Chart options applied.');

    // Handle window resize
    window.addEventListener('resize', () => {
      if (this.chartInstance) {
        console.log('[resize] Window resized, resizing chart...');
        this.chartInstance.resize();
      }
    });

    // Handle window load
    window.addEventListener('load', () => {
      if (this.chartInstance) {
        console.log('[load] Window loaded, resizing chart...');
        this.chartInstance.resize();
      }
    });
  }

  ngOnDestroy() {
    if (this.chartInstance) {
      console.log('[ngOnDestroy] Disposing chart instance.');
      this.chartInstance.dispose();
    }
  }
}